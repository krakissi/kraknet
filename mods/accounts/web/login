#!/usr/bin/perl
# login
# Mike Perron (2013)
#
# A script to create sessions.

use strict;

my $homepath = `mod_home accounts`;
my $database = "accounts.db";
my $postdata = <STDIN>;
my %postvalues;
my $okay = 0;
my $sql;
my $buffer;
my $pwhash;
my $error;
my $redir;

chomp($homepath);
chdir($homepath) or die "Can't get home.";

if(length($postdata) > 0){
	my @pairs = split(/[;&]/, $postdata);
	foreach my $pair (@pairs){
		my ($name, $value) = split(/=/, $pair);
		$value =~ s/%([a-fA-F0-9][a-fA-F0-9])/pack("C", hex($1))/eg;
		$postvalues{$name} = $value; 
		chomp($postvalues{$name});
	}
}

if($postvalues{"name"} =~ /^[a-z\d]{4,}+$/){
#printf "Name fits rules.\n";
	my $pass = $postvalues{pass};
	$pass =~ s/\\/\\\\/g;
	$pass =~ s/'/\\'/g;

	$sql = qq/SELECT hash FROM users WHERE name="$postvalues{name}";/;
	chomp($pwhash = qx/echo '$postvalues{name}$pass' | openssl sha512/);
	chomp($buffer = qx/sqlite3 '$database' '$sql'/);
	warn $buffer;
	$pwhash =~ s/^\$[^\$]*\$[^\$]*\$(.*)$/\1/;

	if((length($buffer) > 0) and ($pwhash eq $buffer)){
		$okay = 1;
		$error = "Auth Accepted";
	} else {
		# Passwords no good.
		$okay = 0;
		$error = "Bad Auth";
	}
	#printf "Hash ($?): $okay, $buffer vs $pwhash\n";
} else {
	# Impossible user name.
	$okay = 0;
	$error = "Bad User";
	#printf "Username is no good.\n";
}

if($okay == 1){
	$redir = $postvalues{onsuccess};
	if($redir eq ""){
		$redir = "/";
	}
} else {
	$redir = $postvalues{onfailure};
	if($redir eq ""){
		$redir = $ENV{HTTP_REFERER};
		if ($redir eq ""){
			$redir = "/";
		}
	}
}
#printf "Content-Type: text/plain\n\n";

printf "Status: 302 $error\n";
printf "Location: $redir\n";
if($okay == 1){
	chomp(my $sid = qx/create_session '$postvalues{name}'/);
	if(($? == 0) and (length($sid) > 0)){
		printf "Set-Cookie: knetsid=$sid; Path=/; Max-Age=5184000\n";
	}
}

# Probably superfluous
printf "\n";
exit 0
